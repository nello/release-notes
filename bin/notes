#!/usr/bin/env ruby

$LOAD_PATH << File.expand_path('../lib/integrations', __dir__)

require 'clamp'
require 'semantic'

require 'buildkite'
require 'github'
require 'trello'
require 'true_pillars'
require 'slacker'

UNTESTED = ['DEVELOPMENT', 'DEPLOY TO QA', 'READY FOR QA', 'QA']
DEV_COMPLETE = ['DONE', 'DEPLOY TO PROD', 'RELEASE TASKS', 'QA', 'READY FOR QA']

Clamp do
  option ['--buildkite-branch', '-B'], 'BUILDKITE_BRANCH',
         'Name of Git branch for this build',
         environment_variable: 'BUILDKITE_BRANCH', required: false

  option ['--buildkite-api-token', '-b'], 'BUILDKITE_API_TOKEN',
         'Buildkite API token for authentication',
         environment_variable: 'BUILDKITE_API_TOKEN', required: true

  option ['--slack-channel', '-c'], 'SLACK_CHANNEL',
         "Send output to Slack channel"

  option ['--github-api-token', '-g'], 'GITHUB_API_TOKEN',
         'Github API token for authentication',
         environment_variable: 'GITHUB_API_TOKEN', required: true

  option ['--build-name', '-n'], 'BUILD_NAME',
         'Name of Buildkite build to be interrogated',
         environment_variable: 'BUILD_NAME', required: true

  option ['--trello-oauth-token', '-o'], 'TRELLO_OAUTH_TOKEN',
         'Trello oauth token for authentication',
         environment_variable: 'TRELLO_OAUTH_TOKEN', required: true

  option ['--previous-build-number', '-p'], 'PREVIOUS_BUILD_NUMBER',
         "Previous build to use as base for comparison"

  option ['--slack-api-token', '-s'], 'SLACK_API_TOKEN',
         'Slack API token for authentication',
         environment_variable: 'SLACK_API_TOKEN', required: false

  option ['--trello-api-key', '-t'], 'TRELLO_API_KEY',
         'Trello API key for authentication',
         environment_variable: 'TRELLO_API_KEY', required: true

  option ['--check-unfinished', '-u'], :flag,
         "return 0 if build has no unfinished work, otherwise 1"

  parameter 'BUILD_NUMBER', "Build to report on", required: false

  def execute
    branch_name = buildkite_branch || 'master'
    puts "build name: #{build_name}:#{branch_name}"
    puts "old build: #{old_build}"
    puts "new build: #{new_build}"
    pipeline = Buildkite.new(build_name, branch_name)

    if new_build < old_build
      puts 'WARNING: these notes are for what you will lose by rolling back!\n'
      commits = pipeline.commits_for(new_build.patch, old_build.patch)
    else
      commits = pipeline.commits_for(old_build.patch, new_build.patch)
    end

    cards = Trello.new.cards_for(commits)
    if check_unfinished?
      print_untested(cards)
    else
      print_dev_complete(cards)
    end
  end

  private

  def old_build
    return Semantic::Version.new(previous_build_number) if previous_build_number
    return Semantic::Version.new('0.0.1') if check_unfinished?
    Semantic::Version.new(TruePillars.version)
  end

  def new_build
    Semantic::Version.new build_number || '2050.12.100000'
  end

  def cards_for_list(list_name, cards)
    cards.select { |card| card && card['list'] == list_name }
  end

  def print_dev_complete(cards)
    pr_heading "Release Notes"
    DEV_COMPLETE.each do |list_name|
      pr_list(list_name, cards_for_list(list_name, cards))
    end
    pr_to_slack if slack_channel
  end

  def print_untested(cards)
    pr_heading "Untested cards"
    status = 0
    UNTESTED.each do |list_name|
      status |= pr_list(list_name, cards_for_list(list_name, cards))
    end
    pr_to_slack if slack_channel
    #exit status -- this would be nice, but we're not that disciplined :)
  end

  def pr_list(list_name, cards)
    pr "#{list_name}\n"
    pr "----"
    pr "\n"
    cards.each { |card| pr_card(card) }
    pr "\n"
    (cards && cards.length > 0) ? 1 : 0
  end

  def pr_card(card)
    pr "#{card['idShort']}: #{card['name']}\n"
    pr "\n   #{card['desc']}\n" unless card['desc'].empty?
    card['checklists'].each do |checklist|
      pr "\n   #{checklist['name']}:\n"
      checklist['checkItems'].each do |item|
        pr "   - #{item['name']} (#{item['state']})\n"
      end
    end
    pr "\n"
  end

  def pr_heading(s)
    pr "\n"
    s.length.times { pr '-' }
    pr "\n# #{s}\n"
    s.length.times { pr '-' }
    pr "\n\n"
  end

  def pr(s)
    @output ||= ""
    @output << s
    print s
  end

  def pr_to_slack
    File.open("release_notes.md", "w") { |f| f.write @output }
    Slacker.new("##{slack_channel}").upload("release_notes.md", "Release Notes: #{build_name} #{build_number}")
  end
end
